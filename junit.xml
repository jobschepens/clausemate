<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="18" skipped="8" tests="470" time="29.554" timestamp="2025-08-29T14:08:06.226884+02:00" hostname="IFL-NB-80"><properties><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_token_creation_always_valid" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3Rva2VuX2NyZWF0aW9uX2Fsd2F5c192YWxpZDoKCiAgLSBkdXJpbmcgZ2VuZXJhdGUgcGhhc2UgKDIuMDcgc2Vjb25kcyk6CiAgICAtIFR5cGljYWwgcnVudGltZXM6IH4gMi0yNSBtcywgb2Ygd2hpY2ggfiAxLTEzIG1zIGluIGRhdGEgZ2VuZXJhdGlvbgogICAgLSA1MCBwYXNzaW5nIGV4YW1wbGVzLCAwIGZhaWxpbmcgZXhhbXBsZXMsIDAgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9NTA=" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_token_invalid_idx_always_fails" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3Rva2VuX2ludmFsaWRfaWR4X2Fsd2F5c19mYWlsczoKCiAgLSBkdXJpbmcgZ2VuZXJhdGUgcGhhc2UgKDAuNTEgc2Vjb25kcyk6CiAgICAtIFR5cGljYWwgcnVudGltZXM6IH4gMS03IG1zLCBvZiB3aGljaCB+IDAtMSBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMTAwIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMCBpbnZhbGlkIGV4YW1wbGVzCgogIC0gU3RvcHBlZCBiZWNhdXNlIHNldHRpbmdzLm1heF9leGFtcGxlcz0xMDA=" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_token_empty_text_always_fails" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3Rva2VuX2VtcHR5X3RleHRfYWx3YXlzX2ZhaWxzOgoKICAtIGR1cmluZyBnZW5lcmF0ZSBwaGFzZSAoMC4wMSBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiA0bXMsIG9mIHdoaWNoIDwgMW1zIGluIGRhdGEgZ2VuZXJhdGlvbgogICAgLSAxIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMCBpbnZhbGlkIGV4YW1wbGVzCgogIC0gU3RvcHBlZCBiZWNhdXNlIG5vdGhpbmcgbGVmdCB0byBkbw==" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_phrase_creation_always_valid" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3BocmFzZV9jcmVhdGlvbl9hbHdheXNfdmFsaWQ6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjUzIHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDMtMTQgbXMsIG9mIHdoaWNoIH4gMi0xMSBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gNTAgcGFzc2luZyBleGFtcGxlcywgMCBmYWlsaW5nIGV4YW1wbGVzLCAwIGludmFsaWQgZXhhbXBsZXMKCiAgLSBTdG9wcGVkIGJlY2F1c2Ugc2V0dGluZ3MubWF4X2V4YW1wbGVzPTUw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_phrase_invalid_indices_always_fail" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3BocmFzZV9pbnZhbGlkX2luZGljZXNfYWx3YXlzX2ZhaWw6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjM4IHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDEtNCBtcywgb2Ygd2hpY2ggfiAwLTEgbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDEwMCBwYXNzaW5nIGV4YW1wbGVzLCAwIGZhaWxpbmcgZXhhbXBsZXMsIDAgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9MTAw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_sentence_context_creation_always_valid" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3NlbnRlbmNlX2NvbnRleHRfY3JlYXRpb25fYWx3YXlzX3ZhbGlkOgoKICAtIGR1cmluZyBnZW5lcmF0ZSBwaGFzZSAoMC4yNyBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiAyLTEyIG1zLCBvZiB3aGljaCB+IDEtOSBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMzAgcGFzc2luZyBleGFtcGxlcywgMCBmYWlsaW5nIGV4YW1wbGVzLCAwIGludmFsaWQgZXhhbXBsZXMKCiAgLSBTdG9wcGVkIGJlY2F1c2Ugc2V0dGluZ3MubWF4X2V4YW1wbGVzPTMw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedValidation::test_sentence_context_invalid_sentence_num_always_fails" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRWYWxpZGF0aW9uOjp0ZXN0X3NlbnRlbmNlX2NvbnRleHRfaW52YWxpZF9zZW50ZW5jZV9udW1fYWx3YXlzX2ZhaWxzOgoKICAtIGR1cmluZyBnZW5lcmF0ZSBwaGFzZSAoMC4yMyBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiAwLTMgbXMsIG9mIHdoaWNoIDwgMW1zIGluIGRhdGEgZ2VuZXJhdGlvbgogICAgLSAxMDAgcGFzc2luZyBleGFtcGxlcywgMCBmYWlsaW5nIGV4YW1wbGVzLCAwIGludmFsaWQgZXhhbXBsZXMKCiAgLSBTdG9wcGVkIGJlY2F1c2Ugc2V0dGluZ3MubWF4X2V4YW1wbGVzPTEwMA==" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedEdgeCases::test_whitespace_only_text_handling" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRFZGdlQ2FzZXM6OnRlc3Rfd2hpdGVzcGFjZV9vbmx5X3RleHRfaGFuZGxpbmc6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjIxIHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDAtMiBtcywgb2Ygd2hpY2ggPCAxbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDEwMCBwYXNzaW5nIGV4YW1wbGVzLCAwIGZhaWxpbmcgZXhhbXBsZXMsIDAgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9MTAw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedEdgeCases::test_large_indices_handling" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRFZGdlQ2FzZXM6OnRlc3RfbGFyZ2VfaW5kaWNlc19oYW5kbGluZzoKCiAgLSBkdXJpbmcgZ2VuZXJhdGUgcGhhc2UgKDAuMTcgc2Vjb25kcyk6CiAgICAtIFR5cGljYWwgcnVudGltZXM6IH4gMC0yIG1zLCBvZiB3aGljaCA8IDFtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMTAwIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMCBpbnZhbGlkIGV4YW1wbGVzCgogIC0gU3RvcHBlZCBiZWNhdXNlIHNldHRpbmdzLm1heF9leGFtcGxlcz0xMDA=" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedEdgeCases::test_special_characters_in_text" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRFZGdlQ2FzZXM6OnRlc3Rfc3BlY2lhbF9jaGFyYWN0ZXJzX2luX3RleHQ6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjI1IHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDAtMyBtcywgb2Ygd2hpY2ggPCAxbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDEwMCBwYXNzaW5nIGV4YW1wbGVzLCAwIGZhaWxpbmcgZXhhbXBsZXMsIDAgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9MTAw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedEdgeCases::test_token_sequence_properties" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRFZGdlQ2FzZXM6OnRlc3RfdG9rZW5fc2VxdWVuY2VfcHJvcGVydGllczoKCiAgLSBkdXJpbmcgZ2VuZXJhdGUgcGhhc2UgKDAuMzQgc2Vjb25kcyk6CiAgICAtIFR5cGljYWwgcnVudGltZXM6IH4gMC0zIG1zLCBvZiB3aGljaCB+IDAtMiBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMTAwIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMTcgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9MTAw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedInvariants::test_token_equality_invariants" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRJbnZhcmlhbnRzOjp0ZXN0X3Rva2VuX2VxdWFsaXR5X2ludmFyaWFudHM6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjI2IHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDItMTAgbXMsIG9mIHdoaWNoIH4gMS02IG1zIGluIGRhdGEgZ2VuZXJhdGlvbgogICAgLSAzMCBwYXNzaW5nIGV4YW1wbGVzLCAwIGZhaWxpbmcgZXhhbXBsZXMsIDAgaW52YWxpZCBleGFtcGxlcwoKICAtIFN0b3BwZWQgYmVjYXVzZSBzZXR0aW5ncy5tYXhfZXhhbXBsZXM9MzA=" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedInvariants::test_phrase_span_invariants" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRJbnZhcmlhbnRzOjp0ZXN0X3BocmFzZV9zcGFuX2ludmFyaWFudHM6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjE2IHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDEtOSBtcywgb2Ygd2hpY2ggfiAxLTYgbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDMwIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMCBpbnZhbGlkIGV4YW1wbGVzCgogIC0gU3RvcHBlZCBiZWNhdXNlIHNldHRpbmdzLm1heF9leGFtcGxlcz0zMA==" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedInvariants::test_sentence_context_invariants" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRJbnZhcmlhbnRzOjp0ZXN0X3NlbnRlbmNlX2NvbnRleHRfaW52YXJpYW50czoKCiAgLSBkdXJpbmcgZ2VuZXJhdGUgcGhhc2UgKDAuMTAgc2Vjb25kcyk6CiAgICAtIFR5cGljYWwgcnVudGltZXM6IH4gMS04IG1zLCBvZiB3aGljaCB+IDEtNyBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMjAgcGFzc2luZyBleGFtcGxlcywgMCBmYWlsaW5nIGV4YW1wbGVzLCAwIGludmFsaWQgZXhhbXBsZXMKCiAgLSBTdG9wcGVkIGJlY2F1c2Ugc2V0dGluZ3MubWF4X2V4YW1wbGVzPTIw" /><property name="hypothesis-statistics-tests/optional/test_property_based.py::TestPropertyBasedPerformance::test_token_creation_performance_scales_linearly" value="dGVzdHMvb3B0aW9uYWwvdGVzdF9wcm9wZXJ0eV9iYXNlZC5weTo6VGVzdFByb3BlcnR5QmFzZWRQZXJmb3JtYW5jZTo6dGVzdF90b2tlbl9jcmVhdGlvbl9wZXJmb3JtYW5jZV9zY2FsZXNfbGluZWFybHk6CgogIC0gZHVyaW5nIGdlbmVyYXRlIHBoYXNlICgwLjM2IHNlY29uZHMpOgogICAgLSBUeXBpY2FsIHJ1bnRpbWVzOiB+IDItMjcwIG1zLCBvZiB3aGljaCB+IDEtMjggbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDggcGFzc2luZyBleGFtcGxlcywgMSBmYWlsaW5nIGV4YW1wbGVzLCAxIGludmFsaWQgZXhhbXBsZXMKICAgIC0gRm91bmQgMSBkaXN0aW5jdCBlcnJvciBpbiB0aGlzIHBoYXNlCgogIC0gZHVyaW5nIHNocmluayBwaGFzZSAoMC4wMCBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiAybXMsIG9mIHdoaWNoIH4gMW1zIGluIGRhdGEgZ2VuZXJhdGlvbgogICAgLSAxIHBhc3NpbmcgZXhhbXBsZXMsIDAgZmFpbGluZyBleGFtcGxlcywgMCBpbnZhbGlkIGV4YW1wbGVzCiAgICAtIFRyaWVkIDEgc2hyaW5rcyBvZiB3aGljaCAwIHdlcmUgc3VjY2Vzc2Z1bAoKICAtIFN0b3BwZWQgYmVjYXVzZSB0ZXN0IHdhcyBmbGFreQ==" /></properties><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_format_detection_and_processing[standard]" time="0.008"><skipped type="pytest.skip" message="Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\standard_15col.tsv not found">C:\GitHub\clausemate\tests\integration\test_format_processing.py:29: Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\standard_15col.tsv not found</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_format_detection_and_processing[extended]" time="0.004"><skipped type="pytest.skip" message="Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\extended_37col.tsv not found">C:\GitHub\clausemate\tests\integration\test_format_processing.py:29: Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\extended_37col.tsv not found</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_format_detection_and_processing[legacy]" time="0.005"><skipped type="pytest.skip" message="Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\legacy_14col.tsv not found">C:\GitHub\clausemate\tests\integration\test_format_processing.py:29: Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\legacy_14col.tsv not found</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_format_detection_and_processing[incomplete]" time="0.007"><skipped type="pytest.skip" message="Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\incomplete_12col.tsv not found">C:\GitHub\clausemate\tests\integration\test_format_processing.py:29: Test file C:\GitHub\clausemate\tests\fixtures\sample_tsvs\incomplete_12col.tsv not found</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_end_to_end_processing" time="0.005"><skipped type="pytest.skip" message="All test files failed to process: {'standard': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\standard_15col.tsv'}, 'extended': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\extended_37col.tsv'}, 'legacy': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\legacy_14col.tsv'}, 'incomplete': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\incomplete_12col.tsv'}}">C:\GitHub\clausemate\tests\integration\test_format_processing.py:105: All test files failed to process: {'standard': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\standard_15col.tsv'}, 'extended': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\extended_37col.tsv'}, 'legacy': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\legacy_14col.tsv'}, 'incomplete': {'success': False, 'relationships_count': 0, 'processing_time': 0, 'error': 'File not found: C:\\GitHub\\clausemate\\tests\\fixtures\\sample_tsvs\\incomplete_12col.tsv'}}</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_adaptive_parsing_fallback" time="0.042" /><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_statistics_tracking" time="0.003"><skipped type="pytest.skip" message="No valid test files available">C:\GitHub\clausemate\tests\integration\test_format_processing.py:146: No valid test files available</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestFormatProcessing" name="test_export_functionality" time="0.007"><skipped type="pytest.skip" message="No valid test files available">C:\GitHub\clausemate\tests\integration\test_format_processing.py:180: No valid test files available</skipped></testcase><testcase classname="tests.integration.test_format_processing.TestErrorHandling" name="test_nonexistent_file" time="0.006" /><testcase classname="tests.integration.test_format_processing.TestErrorHandling" name="test_empty_file" time="0.012" /><testcase classname="tests.integration.test_format_processing.TestErrorHandling" name="test_invalid_tsv_format" time="0.013" /><testcase classname="tests.integration.test_format_processing.TestErrorHandling" name="test_export_to_readonly_location" time="0.014" /><testcase classname="tests.integration.test_format_processing.TestPerformanceBaseline" name="test_processing_performance" time="0.005" /><testcase classname="tests.integration.test_format_processing.TestPerformanceBaseline" name="test_memory_usage_baseline" time="0.004" /><testcase classname="tests.integration.test_format_processing.TestRegressionBaseline" name="test_relationship_extraction_consistency" time="0.005" /><testcase classname="tests.integration.test_format_processing.TestRegressionBaseline" name="test_output_format_consistency" time="0.005" /><testcase classname="tests.optional.test_benchmark.TestBenchmark" name="test_benchmark_imports" time="0.003" /><testcase classname="tests.optional.test_benchmark.TestBenchmark" name="test_benchmark_has_expected_functions" time="0.002" /><testcase classname="tests.optional.test_benchmark.TestBenchmark" name="test_benchmark_execution" time="0.002" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_token_creation_always_valid" time="2.082" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_token_invalid_idx_always_fails" time="0.549" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_token_empty_text_always_fails" time="0.153" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_phrase_creation_always_valid" time="0.544" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_phrase_invalid_indices_always_fail" time="0.408" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_sentence_context_creation_always_valid" time="0.271" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedValidation" name="test_sentence_context_invalid_sentence_num_always_fails" time="0.244" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedEdgeCases" name="test_whitespace_only_text_handling" time="0.215" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedEdgeCases" name="test_large_indices_handling" time="0.182" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedEdgeCases" name="test_special_characters_in_text" time="0.264" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedEdgeCases" name="test_token_sequence_properties" time="0.354" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedInvariants" name="test_token_equality_invariants" time="0.271" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedInvariants" name="test_phrase_span_invariants" time="0.166" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedInvariants" name="test_sentence_context_invariants" time="0.113" /><testcase classname="tests.optional.test_property_based.TestPropertyBasedPerformance" name="test_token_creation_performance_scales_linearly" time="0.386"><failure message="AssertionError('Token creation too slow: 0.001009s per token\nassert 0.001008749008178711 &lt; 0.001') [single exception in FlakyFailure]">+ Exception Group Traceback (most recent call last):
  |   File "C:\GitHub\clausemate\tests\optional\test_property_based.py", line 357, in test_token_creation_performance_scales_linearly
  |     @settings(max_examples=10)
  |                ^^^^^^^
  |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 2126, in wrapped_test
  |     raise the_error_hypothesis_found
  | hypothesis.errors.FlakyFailure: Hypothesis test_token_creation_performance_scales_linearly(self=&lt;test_property_based.TestPropertyBasedPerformance object at 0x000001E2F96C1250&gt;, token_data_list=[{'idx': 145,
  |   'text': 'QSGlg',
  |   'sentence_num': 81,
  |   'grammatical_role': 'ADV',
  |   'thematic_role': 'GOAL'}]) produces unreliable results: Falsified on the first call but did not on a subsequent one (1 sub-exception)
  | Falsifying example: test_token_creation_performance_scales_linearly(
  |     self=&lt;test_property_based.TestPropertyBasedPerformance object at 0x000001E2F96C1250&gt;,
  |     token_data_list=[{'idx': 145,
  |       'text': 'QSGlg',
  |       'sentence_num': 81,
  |       'grammatical_role': 'ADV',
  |       'thematic_role': 'GOAL'}],
  | )
  | Failed to reproduce exception. Expected:
  | self = &lt;test_property_based.TestPropertyBasedPerformance object at 0x000001E2F96C1250&gt;
  | token_data_list = [{'grammatical_role': 'ADV', 'idx': 145, 'sentence_num': 81, 'text': 'QSGlg', ...}]
  |
  |     @given(st.lists(valid_token_data(), min_size=1, max_size=100))
  |     @settings(max_examples=10)
  |     def test_token_creation_performance_scales_linearly(self, token_data_list):
  |         """Test that token creation performance scales reasonably."""
  |         import time
  |
  |         start_time = time.time()
  |         tokens = [Token(**data) for data in token_data_list]
  |         end_time = time.time()
  |
  |         creation_time = end_time - start_time
  |
  |         # Performance should be reasonable (less than 1ms per token on average)
  |         avg_time_per_token = creation_time / len(token_data_list)
  | &gt;       assert avg_time_per_token &lt; 0.001, (
  |             f"Token creation too slow: {avg_time_per_token:.6f}s per token"
  |         )
  | E       AssertionError: Token creation too slow: 0.001009s per token
  | E       assert 0.001008749008178711 &lt; 0.001
  |
  | tests\optional\test_property_based.py:370: AssertionError
  |
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 1209, in _execute_once_for_engine
    |     result = self.execute_once(data)
    |              ^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 1149, in execute_once
    |     result = self.test_runner(data, run)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 822, in default_executor
    |     return function(data)
    |            ^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 1105, in run
    |     return test(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\tests\optional\test_property_based.py", line 357, in test_token_creation_performance_scales_linearly
    |     @settings(max_examples=10)
    |                ^^^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\.nox\test-3-11\Lib\site-packages\hypothesis\core.py", line 1014, in test
    |     result = self.test(*args, **kwargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "C:\GitHub\clausemate\tests\optional\test_property_based.py", line 370, in test_token_creation_performance_scales_linearly
    |     assert avg_time_per_token &lt; 0.001, (
    | AssertionError: Token creation too slow: 0.001009s per token
    | assert 0.001008749008178711 &lt; 0.001
    +------------------------------------</failure></testcase><testcase classname="tests.property.test_property_based_tests.TestPropertyBased" name="test_placeholder" time="0.003" /><testcase classname="tests.test_4tsv_processing" name="test_4tsv_format_detection" time="0.004" /><testcase classname="tests.test_4tsv_processing" name="test_incomplete_parser_direct" time="0.012" /><testcase classname="tests.test_4tsv_processing" name="test_main_analyzer" time="0.007" /><testcase classname="tests.test_adaptive_parser" name="test_file_parsing[data/input/gotofiles/2.tsv-Standard format (15 columns \u2192 448 relationships)]" time="0.008" /><testcase classname="tests.test_adaptive_parser" name="test_file_parsing[data/input/gotofiles/later/1.tsv-Extended format (37 columns \u2192 234 relationships)]" time="0.004" /><testcase classname="tests.test_adaptive_parser" name="test_file_parsing[data/input/gotofiles/later/3.tsv-Legacy format (14 columns \u2192 527 relationships)]" time="0.009" /><testcase classname="tests.test_adaptive_parser" name="test_file_parsing[data/input/gotofiles/later/4.tsv-Incomplete format (12 columns \u2192 695 relationships)]" time="0.003" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_initialization" time="0.006" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_analyze_character_tracking_basic" time="0.023"><failure message="AssertionError: assert 'er' == 'Karl'&#10;  &#10;  #x1B[0m#x1B[91m- Karl#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ er#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine object at 0x000001E2FA6E8A10&gt;

    def test_analyze_character_tracking_basic(self):
        """Test basic character tracking analysis."""
        # Create mock relationships
        token1 = Token(
            idx=1,
            text="Karl",
            sentence_num=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
        )
        token2 = Token(
            idx=2,
            text="er",
            sentence_num=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
        )
        phrase = Phrase(
            text="Karl",
            coreference_id="115",
            start_idx=1,
            end_idx=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
            coreference_type="PersPron[115]",
            animacy=MagicMock(),
            givenness="bekannt",
        )

        relationship = ClauseMateRelationship(
            sentence_id="1",
            sentence_num=1,
            pronoun=token2,
            clause_mate=phrase,
            num_clause_mates=1,
            antecedent_info=MagicMock(),
            pronoun_coref_ids=["115"],
        )

        # Create mock chapter metadata
        chapter_meta = ChapterMetadata(
            chapter_number=1,
            chapter_id="chapter_1",
            source_file="test.tsv",
            file_format="tsv",
            total_relationships=1,
            total_sentences=10,
            sentence_range=(1, 10),
            global_sentence_range=(1, 10),
            coreference_chains=1,
            processing_time=1.0,
            file_size_bytes=1024,
        )

        # Create mock cross-chapter connections
        cross_conn = CrossChapterConnection(
            chain_id="115",
            from_chapter=1,
            to_chapter=2,
            connection_type="coreference",
            strength=0.8,
            mentions_count=2,
            sentence_span=(1, 15),
        )

        with patch('logging.getLogger'):
            profiles = self.engine.analyze_character_tracking(
                [relationship], [chapter_meta], [cross_conn]
            )

        assert len(profiles) == 1
        assert "115" in profiles
        profile = profiles["115"]
        assert profile.character_id == "115"
&gt;       assert profile.primary_name == "Karl"
E       AssertionError: assert 'er' == 'Karl'
E
E         #x1B[0m#x1B[91m- Karl#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E         #x1B[92m+ er#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

tests\test_advanced_analysis_features.py:116: AssertionError</failure></testcase><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_analyze_character_tracking_no_relationships" time="0.005" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_analyze_character_tracking_single_mention" time="0.111"><failure message="AssertionError: assert {'115': Chara...requency=0.0)} == {}&#10;  &#10;  Left contains 1 more item:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33m115#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: CharacterProfile(character_id=#x1B[33m'#x1B[39;49;00m#x1B[33m115#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m&#10;                           primary_name=#x1B[33m'#x1B[39;49;00m#x1B[33mKarl#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m&#10;                           alternative_names=[],#x1B[90m#x1B[39;49;00m&#10;                           first_appearance_chapter=#x1B[94m1#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m&#10;                           last_appearance_chapter=#x1B[94m1#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m...&#10;  &#10;  ...Full output truncated (68 lines hidden), use '-vv' to show">self = &lt;tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine object at 0x000001E2FA6E9350&gt;

    def test_analyze_character_tracking_single_mention(self):
        """Test character tracking with single mention (should be filtered out)."""
        token = Token(
            idx=1,
            text="Karl",
            sentence_num=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
        )
        phrase = Phrase(
            text="Karl",
            coreference_id="115",
            start_idx=1,
            end_idx=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
            coreference_type="PersPron[115]",
            animacy=MagicMock(),
            givenness="bekannt",
        )

        relationship = ClauseMateRelationship(
            sentence_id="1",
            sentence_num=1,
            pronoun=token,
            clause_mate=phrase,
            num_clause_mates=1,
            antecedent_info=MagicMock(),
            pronoun_coref_ids=["115"],
        )

        chapter_meta = ChapterMetadata(
            chapter_number=1,
            chapter_id="chapter_1",
            source_file="test.tsv",
            file_format="tsv",
            total_relationships=1,
            total_sentences=10,
            sentence_range=(1, 10),
            global_sentence_range=(1, 10),
            coreference_chains=1,
            processing_time=1.0,
            file_size_bytes=1024,
        )

        with patch('logging.getLogger'):
            profiles = self.engine.analyze_character_tracking(
                [relationship], [chapter_meta], []
            )

        # Should be empty because character only has 1 mention (filtered out)
&gt;       assert profiles == {}
E       AssertionError: assert {'115': Chara...requency=0.0)} == {}
E
E         Left contains 1 more item:
E         #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33m115#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: CharacterProfile(character_id=#x1B[33m'#x1B[39;49;00m#x1B[33m115#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
E                                  primary_name=#x1B[33m'#x1B[39;49;00m#x1B[33mKarl#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
E                                  alternative_names=[],#x1B[90m#x1B[39;49;00m
E                                  first_appearance_chapter=#x1B[94m1#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m
E                                  last_appearance_chapter=#x1B[94m1#x1B[39;49;00m,#x1B[90m#x1B[39;49;00m...
E
E         ...Full output truncated (68 lines hidden), use '-vv' to show

tests\test_advanced_analysis_features.py:179: AssertionError</failure></testcase><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_analyze_narrative_flow" time="0.005"><failure message="TypeError: unhashable type: 'list'">self = &lt;tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine object at 0x000001E2FA6E8F50&gt;

    def test_analyze_narrative_flow(self):
        """Test narrative flow analysis."""
        # Create mock relationships
        token = Token(
            idx=1,
            text="Karl",
            sentence_num=5,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
        )
        phrase = Phrase(
            text="Mann",
            coreference_id="115",
            start_idx=1,
            end_idx=1,
            grammatical_role="SUBJ",
            thematic_role="AGENT",
            coreference_type="PersPron[115]",
            animacy=MagicMock(),
            givenness="bekannt",
        )

        relationship = ClauseMateRelationship(
            sentence_id="5",
            sentence_num=5,
            pronoun=token,
            clause_mate=phrase,
            num_clause_mates=1,
            antecedent_info=MagicMock(),
            pronoun_coref_ids=["115"],
        )

        # Create mock chapter metadata
        chapter_meta = ChapterMetadata(
            chapter_number=1,
            chapter_id="chapter_1",
            source_file="test.tsv",
            file_format="tsv",
            total_relationships=1,
            total_sentences=20,
            sentence_range=(1, 20),
            global_sentence_range=(1, 20),
            coreference_chains=1,
            processing_time=1.0,
            file_size_bytes=1024,
        )

        # Create mock character profiles
        mention = CharacterMention(
            chapter_number=1,
            sentence_id="5",
            global_sentence_id="1-5",
            mention_text="Karl",
            chain_id="115",
            grammatical_role="SUBJ",
            thematic_role="AGENT",
            sentence_position=0.2,
            narrative_importance=0.7,
        )

        profile = CharacterProfile(
            character_id="115",
            primary_name="Karl",
            alternative_names=[],
            first_appearance_chapter=1,
            last_appearance_chapter=1,
            total_mentions=1,
            chapters_present=[1],
            mentions=[mention],
            narrative_prominence=0.5,
            character_consistency=0.8,
            cross_chapter_continuity=0.6,
            dialogue_frequency=0.3,
        )

        with patch('logging.getLogger'):
&gt;           segments = self.engine.analyze_narrative_flow(
                [relationship], [chapter_meta], {"115": profile}
            )

tests\test_advanced_analysis_features.py:257:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\multi_file\advanced_analysis_features.py:204: in analyze_narrative_flow
    segments = self._segment_chapter_narrative(
src\multi_file\advanced_analysis_features.py:686: in _segment_chapter_narrative
    len({getattr(rel, "pronoun_coref_ids", []) for rel in segment_rels})
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = &lt;list_iterator object at 0x000001E2FAB355A0&gt;

&gt;       len({getattr(rel, "pronoun_coref_ids", []) for rel in segment_rels})
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        / len(segment_rels)
        if segment_rels
        else 0
    )
E   TypeError: unhashable type: 'list'

src\multi_file\advanced_analysis_features.py:686: TypeError</failure></testcase><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_analyze_cross_chapter_transitions" time="0.005" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_generate_coreference_visualization_data" time="0.024" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_calculate_performance_metrics" time="0.101" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_create_comprehensive_analysis_report" time="0.013" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_get_character_color" time="0.006" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_calculate_character_statistics" time="0.008" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_calculate_narrative_statistics" time="0.004" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_calculate_transition_statistics" time="0.012" /><testcase classname="tests.test_advanced_analysis_features.TestAdvancedAnalysisEngine" name="test_generate_analysis_recommendations" time="0.007" /><testcase classname="tests.test_all_chapters" name="test_all_chapters" time="0.033" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_base_analyzer_import" time="0.003" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_statistical_analyzer_import" time="0.002" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_coreference_analyzer_import" time="0.001" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_pronoun_analyzer_import" time="0.001" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_clause_mate_analyzer_import" time="0.004" /><testcase classname="tests.test_analyzers.TestAnalyzerImports" name="test_validation_analyzer_import" time="0.002" /><testcase classname="tests.test_analyzers.TestBaseAnalyzerInterface" name="test_abstract_methods" time="0.004" /><testcase classname="tests.test_analyzers.TestBaseAnalyzerInterface" name="test_is_abstract" time="0.002" /><testcase classname="tests.test_analyzers.TestStatisticalAnalyzerInterface" name="test_abstract_methods" time="0.003" /><testcase classname="tests.test_analyzers.TestStatisticalAnalyzerInterface" name="test_inheritance" time="0.002" /><testcase classname="tests.test_analyzers.TestCoreferenceAnalyzerInterface" name="test_abstract_methods" time="0.002" /><testcase classname="tests.test_analyzers.TestPronounAnalyzerInterface" name="test_abstract_methods" time="0.002" /><testcase classname="tests.test_analyzers.TestClauseMateAnalyzerInterface" name="test_abstract_methods" time="0.002" /><testcase classname="tests.test_analyzers.TestValidationAnalyzerInterface" name="test_abstract_methods" time="0.003" /><testcase classname="tests.test_analyzers.TestMockAnalyzer" name="test_mock_analyzer_creation" time="0.004" /><testcase classname="tests.test_analyzers.TestMockAnalyzer" name="test_mock_analyze" time="0.002" /><testcase classname="tests.test_analyzers.TestMockAnalyzer" name="test_mock_can_analyze" time="0.003" /><testcase classname="tests.test_benchmark.TestBenchmarkResult" name="test_benchmark_result_creation" time="0.003" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_initialization_success" time="0.004" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_initialization_without_psutil" time="0.006" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_benchmark_function" time="0.013" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_benchmark_function_no_output_file" time="0.014" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_benchmark_function_zero_execution_time" time="0.013" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_compare_phases" time="0.054"><failure message="AttributeError: module 'archive.phase1' has no attribute 'clause_mates_complete'">args = (&lt;tests.test_benchmark.TestPerformanceBenchmark object at 0x000001E2F99D05D0&gt;,), keywargs = {}

    @wraps(func)
    def patched(*args, **keywargs):
&gt;       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

C:\Program Files\Python311\Lib\unittest\mock.py:1366:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python311\Lib\contextlib.py:137: in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\unittest\mock.py:1348: in decoration_helper
    arg = exit_stack.enter_context(patching)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\contextlib.py:505: in enter_context
    result = _enter(cm)
             ^^^^^^^^^^
C:\Program Files\Python311\Lib\unittest\mock.py:1421: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

name = 'archive.phase1.clause_mates_complete'

    def resolve_name(name):
        """
        Resolve a name to an object.

        It is expected that `name` will be a string in one of the following
        formats, where W is shorthand for a valid Python identifier and dot stands
        for a literal period in these pseudo-regexes:

        W(.W)*
        W(.W)*:(W(.W)*)?

        The first form is intended for backward compatibility only. It assumes that
        some part of the dotted name is a package, and the rest is an object
        somewhere within that package, possibly nested inside other objects.
        Because the place where the package stops and the object hierarchy starts
        can't be inferred by inspection, repeated attempts to import must be done
        with this form.

        In the second form, the caller makes the division point clear through the
        provision of a single colon: the dotted name to the left of the colon is a
        package to be imported, and the dotted name to the right is the object
        hierarchy within that package. Only one import is needed in this form. If
        it ends with the colon, then a module object is returned.

        The function will return an object (which might be a module), or raise one
        of the following exceptions:

        ValueError - if `name` isn't in a recognised format
        ImportError - if an import failed when it shouldn't have
        AttributeError - if a failure occurred when traversing the object hierarchy
                         within the imported package to get to the desired object.
        """
        global _NAME_PATTERN
        if _NAME_PATTERN is None:
            # Lazy import to speedup Python startup time
            import re
            dotted_words = r'(?!\d)(\w+)(\.(?!\d)(\w+))*'
            _NAME_PATTERN = re.compile(f'^(?P&lt;pkg&gt;{dotted_words})'
                                       f'(?P&lt;cln&gt;:(?P&lt;obj&gt;{dotted_words})?)?$',
                                       re.UNICODE)

        m = _NAME_PATTERN.match(name)
        if not m:
            raise ValueError(f'invalid format: {name!r}')
        gd = m.groupdict()
        if gd.get('cln'):
            # there is a colon - a one-step import is all that's needed
            mod = importlib.import_module(gd['pkg'])
            parts = gd.get('obj')
            parts = parts.split('.') if parts else []
        else:
            # no colon - have to iterate to find the package boundary
            parts = name.split('.')
            modname = parts.pop(0)
            # first part *must* be a module/package.
            mod = importlib.import_module(modname)
            while parts:
                p = parts[0]
                s = f'{modname}.{p}'
                try:
                    mod = importlib.import_module(s)
                    parts.pop(0)
                    modname = s
                except ImportError:
                    break
        # if we reach this point, mod is the module, already imported, and
        # parts is the list of parts in the object hierarchy to be traversed, or
        # an empty list if just the module is wanted.
        result = mod
        for p in parts:
&gt;           result = getattr(result, p)
                     ^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'archive.phase1' has no attribute 'clause_mates_complete'

C:\Program Files\Python311\Lib\pkgutil.py:715: AttributeError</failure></testcase><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_compare_phases_missing_files" time="0.022"><failure message="ImportError: cannot import name 'extract_sentence_number' from 'utils' (C:\GitHub\clausemate\src\utils\__init__.py)">self = &lt;tests.test_benchmark.TestPerformanceBenchmark object at 0x000001E2F99D1E10&gt;

    def test_compare_phases_missing_files(self):
        """Test comparing phases when input files don't exist."""
        with patch("src.benchmark.Path") as mock_path:
            # Mock Path to return non-existent files
            mock_input_file = MagicMock()
            mock_input_file.exists.return_value = False
            mock_path.return_value = mock_input_file

&gt;           results = self.benchmark.compare_phases()
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_benchmark.py:207:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\benchmark.py:91: in compare_phases
    from archive.phase1.clause_mates_complete import main as phase1_main
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    #!/usr/bin/env python3
    """Complete clause mate extraction script with improved program style.
    This script identifies critical pronouns and extracts their clause mates for analysis.

    PHASE 1 IMPROVEMENTS APPLIED:
    - ✅ Constants extracted to config.py
    - ✅ Type hints added throughout
    - ✅ Proper error handling with custom exceptions
    - ✅ Functions broken down and modularized
    - ✅ Utility functions separated

    OUTPUT FILES:
    - clause_mates_chap2_export.csv: Main data export with clause mate relationships
    - clause_mates_data_documentation.md: Comprehensive documentation of data structure
    - clause_mates_metadata.json: Technical metadata and specifications

    DATA STRUCTURE:
    Each row represents one clause mate relationship between a critical pronoun and
    one clause mate in the same sentence. Includes:
    - 37 columns total
    - Pronoun linguistic features (dependent variables)
    - Clause mate features (independent variables)
    - Antecedent information (most recent + first in chain)
    - Numeric versions of string variables for analysis

    CRITICAL PRONOUNS:
    - Third person personal: er, sie, es, ihm, ihr, ihn, ihnen
    - D-pronouns (pronominal): der, die, das, dem, den, deren, dessen, derer
    - Demonstrative: dieser, diese, dieses, diesem, diesen

    For detailed documentation, see clause_mates_data_documentation.md
    """

    import logging
    from typing import Any, Dict, List, Optional, Tuple

    import pandas as pd

    # Import our new modules
    from config import Constants, FilePaths, TSVColumns
    from exceptions import FileProcessingError, ParseError
&gt;   from utils import (
        determine_givenness,
        extract_coref_base_and_occurrence,
        extract_coref_link_numbers,
        extract_coreference_id,
        extract_full_coreference_id,
        extract_sentence_number,
        parse_token_info,
        safe_get_column,
        validate_file_path,
    )
E   ImportError: cannot import name 'extract_sentence_number' from 'utils' (C:\GitHub\clausemate\src\utils\__init__.py)

archive\phase1\clause_mates_complete.py:42: ImportError</failure></testcase><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_save_benchmark_results" time="0.312" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_run_benchmarks" time="0.009"><failure message="TypeError: unsupported format string passed to MagicMock.__format__">self = &lt;tests.test_benchmark.TestPerformanceBenchmark object at 0x000001E2F99D3710&gt;
mock_path_class = &lt;MagicMock name='Path' id='2074380221136'&gt;
mock_benchmark_class = &lt;MagicMock name='PerformanceBenchmark' id='2074380222224'&gt;

    @patch("src.benchmark.PerformanceBenchmark")
    @patch("src.benchmark.Path")
    def test_run_benchmarks(self, mock_path_class, mock_benchmark_class):
        """Test the run_benchmarks function."""
        # Mock benchmark instance
        mock_benchmark = MagicMock()
        mock_benchmark_class.return_value = mock_benchmark

        # Mock results
        mock_results = {"phase1": MagicMock(), "phase2": MagicMock()}
        mock_benchmark.compare_phases.return_value = mock_results

        # Mock output file
        mock_output_file = MagicMock()
        mock_path_class.return_value = mock_output_file

        # Mock print to capture output
        with patch("builtins.print") as mock_print:
&gt;           run_benchmarks()

tests\test_benchmark.py:287:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    def run_benchmarks():
        """Run performance benchmarks."""
        benchmark = PerformanceBenchmark()
        results = benchmark.compare_phases()

        output_file = Path("data/output/performance_benchmark.json")
        benchmark.save_benchmark_results(results, output_file)

        print("Performance Benchmark Results:")
        print("=" * 50)

        for phase, result in results.items():
            print(f"{phase.upper()}:")
&gt;           print(f"  Execution time: {result.execution_time:.2f}s")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: unsupported format string passed to MagicMock.__format__

src\benchmark.py:160: TypeError</failure></testcase><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_system_info_collection" time="0.015" /><testcase classname="tests.test_benchmark.TestPerformanceBenchmark" name="test_system_info_collection_without_psutil" time="0.010" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_initialization" time="0.004" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_basic" time="0.004" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_no_coreference" time="0.001" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_can_extract_with_coreference_links" time="0.001" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_can_extract_with_coreference_types" time="0.005" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_can_extract_with_inanimate_coreference" time="0.006" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_can_extract_no_coreference" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_coreference_chains_multiple_contexts" time="0.005" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_find_mentions" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_link_mentions_to_existing_chains" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_link_mentions_creates_new_chain" time="0.009" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_all_ids_from_token_animate" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_all_ids_from_token_inanimate" time="0.005" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_all_ids_from_token_mixed" time="0.009" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_all_ids_from_token_no_coreference" time="0.008" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_ids_from_string" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_has_coreference_info" time="0.013" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_build_local_chains" time="0.010" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_determine_chain_animacy_animate" time="0.007" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_determine_chain_animacy_inanimate" time="0.006" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_determine_chain_animacy_default" time="0.008" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_determine_token_animacy" time="0.006" /><testcase classname="tests.test_coreference_extractor.TestCoreferenceExtractor" name="test_extract_all_ids_from_context" time="0.018" /><testcase classname="tests.test_cross_chapter_visualization" name="test_visualization" time="0.015" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_initialization" time="0.004" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_resolve_cross_chapter_chains_empty_input" time="0.025" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_resolve_cross_chapter_chains_single_chapter" time="0.078" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_resolve_cross_chapter_chains_multiple_chapters_same_chains" time="0.022" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_resolve_cross_chapter_chains_no_cross_chapter_chains" time="0.016" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_extract_chapter_chains_with_pronoun_coref_ids" time="0.021" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_extract_chapter_chains_with_clause_mate_coref" time="0.009" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_identify_cross_chapter_connections" time="0.005" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_merge_connected_chains" time="0.003" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_dfs_connected_chains" time="0.003" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_normalize_text" time="0.004" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_extract_chapter_number" time="0.005" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_chains_are_connected_exact_match" time="0.006" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_chains_are_connected_entity_overlap" time="0.004" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_chains_are_connected_key_entity_overlap" time="0.003" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_chains_are_connected_no_connection" time="0.003" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_get_cross_chapter_summary" time="0.004" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_logging_initialization" time="0.016" /><testcase classname="tests.test_cross_file_coreference_resolver.TestCrossFileCoreferenceResolver" name="test_resolve_cross_chapter_chains_with_complex_data" time="0.018" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_initialization" time="0.009" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_initialization_default_root" time="0.007" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_test_data" time="0.018" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_private_local_exists" time="0.020" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_private_local_not_exists" time="0.017" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_custom_path_exists" time="0.015" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_custom_path_not_exists" time="0.015" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_directory_private_git_repo" time="1.098" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_update_private_repository_success" time="0.009" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_update_private_repository_failure" time="0.010" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_update_private_repository_no_git" time="0.012" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_repository_status_no_repo" time="0.010" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_repository_status_with_repo" time="0.015" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_repository_status_git_failure" time="0.021" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_available_files" time="0.016" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_source_info" time="0.021"><failure message="TypeError: an integer is required">self = &lt;tests.test_data_source_loader.TestDataSourceLoader object at 0x000001E2F964B7D0&gt;

    def test_get_data_source_info(self):
        """Test get_data_source_info method."""
        # Create test data directory with files
        data_dir = self.temp_dir / "data" / "input" / "gotofiles"
        data_dir.mkdir(parents=True)
        (data_dir / "file1.tsv").touch()
        (data_dir / "file2.tsv").touch()

        # Mock file sizes
        with patch("pathlib.Path.stat") as mock_stat:
            mock_stat.return_value.st_size = 1024  # 1KB each

            with patch.object(self.loader, 'get_data_directory', return_value=data_dir):
&gt;               result = self.loader.get_data_source_info()
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\test_data_source_loader.py:247:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\utils\data_source_loader.py:152: in get_data_source_info
    files = self.get_available_files()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
src\utils\data_source_loader.py:147: in get_available_files
    return list(data_dir.glob("*.tsv"))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\pathlib.py:953: in glob
    for p in selector.select_from(self):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\pathlib.py:320: in select_from
    if not is_dir(parent_path):
           ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = WindowsPath('C:/Users/Job/AppData/Local/Temp/tmprhonfjh8/data/input/gotofiles')

    def is_dir(self):
        """
        Whether this path is a directory.
        """
        try:
&gt;           return S_ISDIR(self.stat().st_mode)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: an integer is required

C:\Program Files\Python311\Lib\pathlib.py:1250: TypeError</failure></testcase><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_get_data_source_info_private" time="0.007" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_ensure_data_available_success" time="0.022" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_ensure_data_available_no_files" time="0.011" /><testcase classname="tests.test_data_source_loader.TestDataSourceLoader" name="test_ensure_data_available_error" time="0.008" /><testcase classname="tests.test_data_source_loader.TestSetupDataSourceForMain" name="test_setup_data_source_for_main_success" time="0.005" /><testcase classname="tests.test_data_source_loader.TestSetupDataSourceForMain" name="test_setup_data_source_for_main_no_data" time="0.003" /><testcase classname="tests.test_enhanced_output_system.TestChapterMetadata" name="test_chapter_metadata_creation" time="0.006" /><testcase classname="tests.test_enhanced_output_system.TestCrossChapterConnection" name="test_cross_chapter_connection_creation" time="0.002" /><testcase classname="tests.test_enhanced_output_system.TestProcessingStatistics" name="test_processing_statistics_creation" time="0.005" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_initialization" time="0.003" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_initialization_with_logger" time="0.009" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_enhanced_csv_output_empty_relationships" time="0.011" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_enhanced_csv_output_with_relationships" time="0.017"><failure message="TypeError: '&gt;' not supported between instances of 'MagicMock' and 'MagicMock'">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA86AC50&gt;

    def test_create_enhanced_csv_output_with_relationships(self):
        """Test enhanced CSV output with relationships."""
        # Create mock relationship
        mock_relationship = MagicMock()
        mock_relationship.sentence_num = 5
        mock_relationship.pronoun = MagicMock()
        mock_relationship.pronoun.text = "er"
        mock_relationship.pronoun.idx = 2
        mock_relationship.clause_mate = MagicMock()
        mock_relationship.clause_mate.text = "Karl"
        mock_relationship.clause_mate.start_idx = 10
        mock_relationship.clause_mate.end_idx = 14

        # Set default attributes
        mock_relationship.chapter_file = "test.tsv"
        mock_relationship.chapter_number = 1
        mock_relationship.source_file_path = "/path/to/test.tsv"
        mock_relationship.global_sentence_id = "global_5"
        mock_relationship.cross_chapter = False
        mock_relationship.first_words = "Karl sagte"

        # Create mock chapter metadata
        mock_chapter_meta = MagicMock()
        mock_chapter_meta.chapter_number = 1
        mock_chapter_meta.file_format = "standard"
        mock_chapter_meta.file_size_bytes = 1024

&gt;       result_path = self.system.create_enhanced_csv_output(
            [mock_relationship], [mock_chapter_meta], []
        )

tests\test_enhanced_output_system.py:207:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\multi_file\enhanced_output_system.py:204: in create_enhanced_csv_output
    analysis_scores = self._calculate_analysis_scores(rel, chapter_meta)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.multi_file.enhanced_output_system.EnhancedOutputSystem object at 0x000001E2FAEA33D0&gt;
relationship = &lt;MagicMock id='2074383884432'&gt;, chapter_meta = &lt;MagicMock id='2074383881680'&gt;

    def _calculate_analysis_scores(
        self,
        relationship: ClauseMateRelationship,
        chapter_meta: ChapterMetadata | None,
    ) -&gt; dict[str, float]:
        """Calculate enhanced analysis scores for a relationship."""
        # Narrative position (0.0 to 1.0 based on position in chapter)
        narrative_position = 0.0
        if (
            chapter_meta
&gt;           and chapter_meta.sentence_range[1] &gt; chapter_meta.sentence_range[0]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        ):
E       TypeError: '&gt;' not supported between instances of 'MagicMock' and 'MagicMock'

src\multi_file\enhanced_output_system.py:508: TypeError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_comprehensive_statistics_empty_data" time="0.007" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_comprehensive_statistics_with_data" time="0.041"><failure message="TypeError: Object of type MagicMock is not JSON serializable">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA86BF10&gt;

    def test_create_comprehensive_statistics_with_data(self):
        """Test comprehensive statistics with actual data."""
        # Create mock chapter metadata
        mock_chapter_meta1 = MagicMock()
        mock_chapter_meta1.chapter_number = 1
        mock_chapter_meta1.total_sentences = 50
        mock_chapter_meta1.coreference_chains = 5

        mock_chapter_meta2 = MagicMock()
        mock_chapter_meta2.chapter_number = 2
        mock_chapter_meta2.total_sentences = 60
        mock_chapter_meta2.coreference_chains = 6

        chapter_metadata = [mock_chapter_meta1, mock_chapter_meta2]

        # Create mock relationships
        mock_relationships = [MagicMock() for _ in range(100)]
        for i, rel in enumerate(mock_relationships):
            rel.cross_chapter = i &lt; 10  # 10 cross-chapter relationships

        # Create mock cross-chapter connections
        cross_chapter_connections = [MagicMock() for _ in range(3)]

&gt;       result_path = self.system.create_comprehensive_statistics(
            mock_relationships, chapter_metadata, cross_chapter_connections, 5.0
        )

tests\test_enhanced_output_system.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\multi_file\enhanced_output_system.py:346: in create_comprehensive_statistics
    json.dump(stats_dict, f, indent=2, ensure_ascii=False)
C:\Program Files\Python311\Lib\json\__init__.py:179: in dump
    for chunk in iterable:
C:\Program Files\Python311\Lib\json\encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
C:\Program Files\Python311\Lib\json\encoder.py:406: in _iterencode_dict
    yield from chunks
C:\Program Files\Python311\Lib\json\encoder.py:326: in _iterencode_list
    yield from chunks
C:\Program Files\Python311\Lib\json\encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.encoder.JSONEncoder object at 0x000001E2FAE0C450&gt;, o = &lt;MagicMock id='2074383272784'&gt;

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).

        For example, to support arbitrary iterators, you could
        implement default like this::

            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)

        """
&gt;       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type MagicMock is not JSON serializable

C:\Program Files\Python311\Lib\json\encoder.py:180: TypeError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_chapter_boundary_report_empty_data" time="0.006"><failure message="assert -1 == 0">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA86BFD0&gt;

    def test_create_chapter_boundary_report_empty_data(self):
        """Test chapter boundary report with empty data."""
        result_path = self.system.create_chapter_boundary_report([], [])
        assert Path(result_path).exists()

        # Check JSON content
        with open(result_path) as f:
            data = json.load(f)

        assert "chapter_transitions" in data
        assert "boundary_statistics" in data
        assert "cross_chapter_patterns" in data
        assert "metadata" in data
        assert data["chapter_transitions"] == []
&gt;       assert data["boundary_statistics"]["total_boundaries"] == 0
E       assert -1 == 0

tests\test_enhanced_output_system.py:299: AssertionError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_chapter_boundary_report_with_data" time="0.010" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_analyze_cross_chapter_relationship_no_connections" time="0.004" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_analyze_cross_chapter_relationship_with_connection" time="0.007" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_calculate_analysis_scores_basic_relationship" time="0.009" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_calculate_analysis_scores_no_chapter_meta" time="0.013" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_boundary_marker_chapter_beginning" time="0.007"><failure message="AssertionError: assert 'unknown' == 'chapter_beginning'&#10;  &#10;  #x1B[0m#x1B[91m- chapter_beginning#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA876510&gt;

    def test_create_boundary_marker_chapter_beginning(self):
        """Test boundary marker creation for chapter beginning."""
        mock_relationship = MagicMock()
        mock_relationship.sentence_num = 3  # Near beginning

        mock_chapter_meta = MagicMock()
        mock_chapter_meta.chapter_number = 1
        mock_chapter_meta.sentence_range = (1, 50)

        result = self.system._create_boundary_marker(
            mock_relationship, [mock_chapter_meta]
        )

&gt;       assert result == "chapter_beginning"
E       AssertionError: assert 'unknown' == 'chapter_beginning'
E
E         #x1B[0m#x1B[91m- chapter_beginning#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E         #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

tests\test_enhanced_output_system.py:436: AssertionError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_boundary_marker_chapter_end" time="0.006"><failure message="AssertionError: assert 'unknown' == 'chapter_end'&#10;  &#10;  #x1B[0m#x1B[91m- chapter_end#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA876290&gt;

    def test_create_boundary_marker_chapter_end(self):
        """Test boundary marker creation for chapter end."""
        mock_relationship = MagicMock()
        mock_relationship.sentence_num = 48  # Near end

        mock_chapter_meta = MagicMock()
        mock_chapter_meta.chapter_number = 1
        mock_chapter_meta.sentence_range = (1, 50)

        result = self.system._create_boundary_marker(
            mock_relationship, [mock_chapter_meta]
        )

&gt;       assert result == "chapter_end"
E       AssertionError: assert 'unknown' == 'chapter_end'
E
E         #x1B[0m#x1B[91m- chapter_end#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E         #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

tests\test_enhanced_output_system.py:451: AssertionError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_create_boundary_marker_chapter_middle" time="0.007"><failure message="AssertionError: assert 'unknown' == 'chapter_middle'&#10;  &#10;  #x1B[0m#x1B[91m- chapter_middle#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.test_enhanced_output_system.TestEnhancedOutputSystem object at 0x000001E2FA877190&gt;

    def test_create_boundary_marker_chapter_middle(self):
        """Test boundary marker creation for chapter middle."""
        mock_relationship = MagicMock()
        mock_relationship.sentence_num = 25  # Middle

        mock_chapter_meta = MagicMock()
        mock_chapter_meta.chapter_number = 1
        mock_chapter_meta.sentence_range = (1, 50)

        result = self.system._create_boundary_marker(
            mock_relationship, [mock_chapter_meta]
        )

&gt;       assert result == "chapter_middle"
E       AssertionError: assert 'unknown' == 'chapter_middle'
E
E         #x1B[0m#x1B[91m- chapter_middle#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E         #x1B[92m+ unknown#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

tests\test_enhanced_output_system.py:466: AssertionError</failure></testcase><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_calculate_narrative_continuity_no_connections" time="0.006" /><testcase classname="tests.test_enhanced_output_system.TestEnhancedOutputSystem" name="test_calculate_narrative_continuity_with_connections" time="0.005" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_nonexistent_file" time="0.006" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_empty_file" time="0.003" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_with_variables" time="0.008" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_ignores_comments_and_empty_lines" time="0.007" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_get_env_var_with_value" time="0.003" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_get_env_var_without_value" time="0.003" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_get_env_var_with_default" time="0.003" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_get_env_var_with_existing_default" time="0.004" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_ensure_env_loaded_no_keys" time="0.005" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_ensure_env_loaded_with_keys" time="0.009" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_default_file" time="0.002" /><testcase classname="tests.test_env_loader.TestEnvLoader" name="test_load_env_vars_custom_file" time="0.012" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_initialization" time="0.005" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_initialization_with_limitations" time="0.009" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_setup_column_mapping_with_preamble" time="0.021" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_setup_column_mapping_without_preamble" time="0.017" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_setup_12_column_mapping" time="0.004" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_setup_13_column_mapping" time="0.005" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_setup_minimal_column_mapping" time="0.004" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_detect_available_features_from_schema" time="0.016" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_extract_first_words" time="0.011" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_create_token_from_row_basic" time="0.013" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_create_token_from_row_with_coreference" time="0.005" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_create_token_from_row_short_row" time="0.006" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_create_token_from_row_invalid_token_id" time="0.005" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_get_limitations" time="0.009" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_get_compatibility_info" time="0.006" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_parse_sentence_streaming_basic" time="0.007" /><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_parse_sentence_streaming_file_not_found" time="0.006"><failure message="src.exceptions.FileProcessingError: File not found: nonexistent.tsv">self = &lt;src.parsers.incomplete_format_parser.IncompleteFormatParser object at 0x000001E2FAE6AED0&gt;
file_path = 'nonexistent.tsv'

    def _parse_incomplete_format_streaming(
        self, file_path: str
    ) -&gt; Iterator[SentenceContext]:
        """Direct parsing implementation for incomplete formats."""
        import csv

        current_tokens = []
        current_first_words = None
        current_sentence_num = None
        current_sentence_id = None
        pending_first_words = None
        first_token_texts = []

        try:
&gt;           with open(file_path, encoding="utf-8") as file:
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src\parsers\incomplete_format_parser.py:220:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python311\Lib\unittest\mock.py:1118: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\unittest\mock.py:1122: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='open' id='2074383659280'&gt;, args = ('nonexistent.tsv',), kwargs = {'encoding': 'utf-8'}
effect = &lt;class 'FileNotFoundError'&gt;

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method

        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               FileNotFoundError

C:\Program Files\Python311\Lib\unittest\mock.py:1177: FileNotFoundError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_incomplete_format_parser.TestIncompleteFormatParser object at 0x000001E2F9923D50&gt;

    def test_parse_sentence_streaming_file_not_found(self):
        """Test parsing with file not found error."""
        with (
            patch(
                "src.parsers.incomplete_format_parser.open",
                side_effect=FileNotFoundError,
            ),
            pytest.raises(FileNotFoundError),
        ):
&gt;           list(self.parser._parse_incomplete_format_streaming("nonexistent.tsv"))

tests\test_incomplete_format_parser.py:329:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.parsers.incomplete_format_parser.IncompleteFormatParser object at 0x000001E2FAE6AED0&gt;
file_path = 'nonexistent.tsv'

    def _parse_incomplete_format_streaming(
        self, file_path: str
    ) -&gt; Iterator[SentenceContext]:
        """Direct parsing implementation for incomplete formats."""
        import csv

        current_tokens = []
        current_first_words = None
        current_sentence_num = None
        current_sentence_id = None
        pending_first_words = None
        first_token_texts = []

        try:
            with open(file_path, encoding="utf-8") as file:
                reader = csv.reader(file, delimiter="\t")
                for line_num, row in enumerate(reader, 1):
                    try:
                        if not row or (len(row) == 1 and not row[0].strip()):
                            continue

                        line_text = "\t".join(row)

                        # Handle sentence boundaries
                        if line_text.startswith("#Text="):
                            # Yield previous sentence if we have tokens
                            if current_tokens and current_sentence_id is not None:
                                if not current_first_words and first_token_texts:
                                    current_first_words = "_".join(first_token_texts)

                                yield self._create_sentence_context(
                                    sentence_id=(
                                        str(current_sentence_num)
                                        if current_sentence_num is not None
                                        else "1"
                                    ),
                                    sentence_num=(
                                        current_sentence_num
                                        if current_sentence_num is not None
                                        else 1
                                    ),
                                    tokens=current_tokens,
                                    first_words=current_first_words or "",
                                )

                            # Prepare for next sentence
                            current_tokens = []
                            current_sentence_num = None
                            current_sentence_id = None
                            pending_first_words = self._extract_first_words(line_text)
                            current_first_words = None
                            first_token_texts = []
                            continue

                        # Skip other comment lines
                        if line_text.startswith("#"):
                            continue

                        # Parse token with incomplete format handling
                        token = self._create_token_from_row(
                            row, current_sentence_id or "1"
                        )

                        if token:
                            # Handle first token of sentence
                            if current_sentence_num is None:
                                current_sentence_num = token.sentence_num
                                current_sentence_id = str(token.sentence_num)
                                if pending_first_words is not None:
                                    current_first_words = pending_first_words
                                    pending_first_words = None
                                else:
                                    first_token_texts = []

                            # Collect first three token texts if needed
                            if (
                                current_first_words is None
                                and len(first_token_texts) &lt; 3
                            ):
                                first_token_texts.append(token.text)

                            # Validate and add token
                            if self.processor.validate_token(token):
                                current_tokens.append(token)

                    except Exception as e:
                        self.logger.error(f"Error processing line {line_num}: {str(e)}")
                        # Continue processing instead of failing completely
                        continue

                # Yield last sentence
                if current_tokens and current_sentence_id is not None:
                    if not current_first_words and first_token_texts:
                        current_first_words = "_".join(first_token_texts)

                    yield self._create_sentence_context(
                        sentence_id=(
                            str(current_sentence_num)
                            if current_sentence_num is not None
                            else "1"
                        ),
                        sentence_num=(
                            current_sentence_num
                            if current_sentence_num is not None
                            else 1
                        ),
                        tokens=current_tokens,
                        first_words=current_first_words or "",
                    )

        except FileNotFoundError as exc:
            from ..exceptions import FileProcessingError

&gt;           raise FileProcessingError(f"File not found: {file_path}") from exc
E           src.exceptions.FileProcessingError: File not found: nonexistent.tsv

src\parsers\incomplete_format_parser.py:319: FileProcessingError</failure></testcase><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_parse_sentence_streaming_permission_error" time="0.008"><failure message="src.exceptions.FileProcessingError: Permission denied: protected.tsv">self = &lt;src.parsers.incomplete_format_parser.IncompleteFormatParser object at 0x000001E2FAA98FD0&gt;
file_path = 'protected.tsv'

    def _parse_incomplete_format_streaming(
        self, file_path: str
    ) -&gt; Iterator[SentenceContext]:
        """Direct parsing implementation for incomplete formats."""
        import csv

        current_tokens = []
        current_first_words = None
        current_sentence_num = None
        current_sentence_id = None
        pending_first_words = None
        first_token_texts = []

        try:
&gt;           with open(file_path, encoding="utf-8") as file:
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src\parsers\incomplete_format_parser.py:220:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python311\Lib\unittest\mock.py:1118: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Program Files\Python311\Lib\unittest\mock.py:1122: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;MagicMock name='open' id='2074379658832'&gt;, args = ('protected.tsv',), kwargs = {'encoding': 'utf-8'}
effect = &lt;class 'PermissionError'&gt;

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method

        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
&gt;               raise effect
E               PermissionError

C:\Program Files\Python311\Lib\unittest\mock.py:1177: PermissionError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_incomplete_format_parser.TestIncompleteFormatParser object at 0x000001E2F9923290&gt;

    def test_parse_sentence_streaming_permission_error(self):
        """Test parsing with permission error."""
        with (
            patch(
                "src.parsers.incomplete_format_parser.open", side_effect=PermissionError
            ),
            pytest.raises(PermissionError),
        ):
&gt;           list(self.parser._parse_incomplete_format_streaming("protected.tsv"))

tests\test_incomplete_format_parser.py:339:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;src.parsers.incomplete_format_parser.IncompleteFormatParser object at 0x000001E2FAA98FD0&gt;
file_path = 'protected.tsv'

    def _parse_incomplete_format_streaming(
        self, file_path: str
    ) -&gt; Iterator[SentenceContext]:
        """Direct parsing implementation for incomplete formats."""
        import csv

        current_tokens = []
        current_first_words = None
        current_sentence_num = None
        current_sentence_id = None
        pending_first_words = None
        first_token_texts = []

        try:
            with open(file_path, encoding="utf-8") as file:
                reader = csv.reader(file, delimiter="\t")
                for line_num, row in enumerate(reader, 1):
                    try:
                        if not row or (len(row) == 1 and not row[0].strip()):
                            continue

                        line_text = "\t".join(row)

                        # Handle sentence boundaries
                        if line_text.startswith("#Text="):
                            # Yield previous sentence if we have tokens
                            if current_tokens and current_sentence_id is not None:
                                if not current_first_words and first_token_texts:
                                    current_first_words = "_".join(first_token_texts)

                                yield self._create_sentence_context(
                                    sentence_id=(
                                        str(current_sentence_num)
                                        if current_sentence_num is not None
                                        else "1"
                                    ),
                                    sentence_num=(
                                        current_sentence_num
                                        if current_sentence_num is not None
                                        else 1
                                    ),
                                    tokens=current_tokens,
                                    first_words=current_first_words or "",
                                )

                            # Prepare for next sentence
                            current_tokens = []
                            current_sentence_num = None
                            current_sentence_id = None
                            pending_first_words = self._extract_first_words(line_text)
                            current_first_words = None
                            first_token_texts = []
                            continue

                        # Skip other comment lines
                        if line_text.startswith("#"):
                            continue

                        # Parse token with incomplete format handling
                        token = self._create_token_from_row(
                            row, current_sentence_id or "1"
                        )

                        if token:
                            # Handle first token of sentence
                            if current_sentence_num is None:
                                current_sentence_num = token.sentence_num
                                current_sentence_id = str(token.sentence_num)
                                if pending_first_words is not None:
                                    current_first_words = pending_first_words
                                    pending_first_words = None
                                else:
                                    first_token_texts = []

                            # Collect first three token texts if needed
                            if (
                                current_first_words is None
                                and len(first_token_texts) &lt; 3
                            ):
                                first_token_texts.append(token.text)

                            # Validate and add token
                            if self.processor.validate_token(token):
                                current_tokens.append(token)

                    except Exception as e:
                        self.logger.error(f"Error processing line {line_num}: {str(e)}")
                        # Continue processing instead of failing completely
                        continue

                # Yield last sentence
                if current_tokens and current_sentence_id is not None:
                    if not current_first_words and first_token_texts:
                        current_first_words = "_".join(first_token_texts)

                    yield self._create_sentence_context(
                        sentence_id=(
                            str(current_sentence_num)
                            if current_sentence_num is not None
                            else "1"
                        ),
                        sentence_num=(
                            current_sentence_num
                            if current_sentence_num is not None
                            else 1
                        ),
                        tokens=current_tokens,
                        first_words=current_first_words or "",
                    )

        except FileNotFoundError as exc:
            from ..exceptions import FileProcessingError

            raise FileProcessingError(f"File not found: {file_path}") from exc
        except PermissionError as exc:
            from ..exceptions import FileProcessingError

&gt;           raise FileProcessingError(f"Permission denied: {file_path}") from exc
E           src.exceptions.FileProcessingError: Permission denied: protected.tsv

src\parsers\incomplete_format_parser.py:323: FileProcessingError</failure></testcase><testcase classname="tests.test_incomplete_format_parser.TestIncompleteFormatParser" name="test_create_sentence_context" time="0.016" /><testcase classname="tests.test_integrated_system" name="test_format_detection" time="0.008" /><testcase classname="tests.test_integrated_system" name="test_adaptive_analyzer" time="0.018" /><testcase classname="tests.test_integrated_system" name="test_legacy_fallback" time="0.006" /><testcase classname="tests.test_integrated_system" name="test_command_line_interface" time="1.503" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_initialization" time="0.003" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_initialization_with_disabled_resolution" time="0.002" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_single_file" time="0.003" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_invalid_extension" time="0.005" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_directory_main_files" time="0.016" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_directory_with_later_subdirectory" time="0.020" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_nonexistent_path" time="0.002" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_discover_chapter_files_empty_directory" time="0.008" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_analyze_chapter_files" time="0.005" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_analyze_chapter_files_with_different_formats" time="0.732" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_process_files_success" time="0.022" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_process_files_with_error" time="0.121" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_get_processing_summary" time="0.004" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_build_cross_chapter_lookup" time="0.015" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_normalize_entity_text" time="0.009" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_chapter_info_dataclass" time="0.005" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_multi_file_processing_result_dataclass" time="0.004" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_process_files_without_cross_chapter_resolution" time="0.034" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_extract_chapter_number_from_filename" time="0.003" /><testcase classname="tests.test_multi_file_batch_processor.TestMultiFileBatchProcessor" name="test_chapter_files_sorting" time="0.025" /><testcase classname="tests.test_multi_file_processing" name="test_multi_file_processing" time="0.021" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_analyzer_initialization" time="0.005" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_analyzer_with_test_file" time="0.022" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_coreference_id_extraction" time="0.007" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_sentence_boundary_detection" time="0.025"><skipped type="pytest.skip" message="Test expects different boundary detection behavior - needs review">C:\GitHub\clausemate\tests\test_phase2_components.py:82: Test expects different boundary detection behavior - needs review</skipped></testcase><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_streaming_parser_with_content" time="0.016" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_token_creation" time="0.008" /><testcase classname="tests.test_phase2_components.TestModularComponents" name="test_token_validation" time="0.009" /><testcase classname="tests.test_phase2_components.TestDataModels" name="test_sentence_context_creation" time="0.011" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_initialization" time="0.011" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_extract_basic" time="0.006" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_extract_no_phrases" time="0.017" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_can_extract_with_coreference_links" time="0.003" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_can_extract_with_coreference_types" time="0.009" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_can_extract_with_inanimate_coreference" time="0.009" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_can_extract_no_coreference" time="0.004" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_extract_phrases_multiple_entities" time="0.010" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_extract_phrases_single_token_phrases" time="0.003" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_group_tokens_by_entity" time="0.005" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_is_phrase_boundary_same_entity" time="0.009" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_is_phrase_boundary_different_entity" time="0.002" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_is_phrase_boundary_no_coreference" time="0.008" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_get_coreference_ids_from_link" time="0.004" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_get_coreference_ids_from_type" time="0.004" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_get_coreference_ids_inanimate" time="0.010" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_get_coreference_ids_no_coreference" time="0.010" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_build_phrase_text" time="0.005" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_build_phrase_text_empty" time="0.002" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_validate_phrase_valid" time="0.006" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_validate_phrase_empty_tokens" time="0.005" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_validate_phrase_no_entity_id" time="0.006" /><testcase classname="tests.test_phrase_extractor.TestPhraseExtractor" name="test_validate_phrase_mismatched_entity" time="0.008" /><testcase classname="tests.test_preamble_parser.TestAnnotationSchema" name="test_annotation_schema_creation" time="0.015" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_initialization" time="0.007" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_reset" time="0.017" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_parse_preamble_lines_span_annotations" time="0.010" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_parse_preamble_lines_chain_annotations" time="0.003" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_parse_preamble_lines_relation_annotations" time="0.005" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_parse_preamble_lines_mixed_annotations" time="0.012" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_parse_preamble_lines_empty_features" time="0.009" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_calculate_column_positions_simple_span" time="0.008" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_calculate_column_positions_span_with_features" time="0.003" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_calculate_column_positions_mixed_annotations" time="0.008" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_calculate_column_positions_empty_features" time="0.002" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_columns_no_schema" time="0.004" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_columns_with_schema" time="0.010" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_morphological_columns_no_schema" time="0.008" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_morphological_columns_with_schema" time="0.006" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_pronoun_type_column_no_schema" time="0.002" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_pronoun_type_column_found" time="0.002" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_pronoun_type_column_not_found" time="0.003" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_link_column_no_schema" time="0.004" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_link_column_found" time="0.002" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_type_column_no_schema" time="0.003" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_coreference_type_column_found" time="0.007" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_grammatical_role_column_no_schema" time="0.007" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_grammatical_role_column_found" time="0.005" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_thematic_role_column_no_schema" time="0.008" /><testcase classname="tests.test_preamble_parser.TestPreambleParser" name="test_get_thematic_role_column_found" time="0.004" /><testcase classname="tests.test_preamble_parser.TestExtractPreambleFromFile" name="test_extract_preamble_from_file_success" time="0.012" /><testcase classname="tests.test_preamble_parser.TestExtractPreambleFromFile" name="test_extract_preamble_from_file_no_preamble" time="0.006" /><testcase classname="tests.test_preamble_parser.TestExtractPreambleFromFile" name="test_extract_preamble_from_file_empty_file" time="0.007" /><testcase classname="tests.test_preamble_parser.TestExtractPreambleFromFile" name="test_extract_preamble_from_file_file_not_found" time="0.004" /><testcase classname="tests.test_preamble_parser.TestExtractPreambleFromFile" name="test_extract_preamble_from_file_encoding_error" time="0.005" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_initialization" time="0.008" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_extract_basic" time="0.008" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_extract_no_pronouns" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_can_extract_with_tokens" time="0.007" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_can_extract_empty_tokens" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_extract_pronouns_mixed_tokens" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_personal_masculine" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_personal_feminine" time="0.004" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_personal_neuter" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_personal_plural" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_d_pronoun" time="0.003" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_demonstrative" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_with_coreference_animate" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_with_inanimate_coreference" time="0.004" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_classify_pronoun_unknown" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_is_pronoun_critical_pronoun" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_is_pronoun_non_pronoun" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_is_pronoun_with_coreference_annotation" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_is_pronoun_with_inanimate_coreference_annotation" time="0.003" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_is_critical_pronoun" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_personal" time="0.001" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_d_pronoun" time="0.003" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_demonstrative" time="0.003" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_inanimate" time="0.006" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_no_pronoun" time="0.002" /><testcase classname="tests.test_pronoun_extractor.TestPronounExtractor" name="test_has_pronoun_coreference_annotation_no_coreference" time="0.002" /><testcase classname="tests.test_run_phase2.TestRunPhase2EntryPoint" name="test_script_imports" time="0.005" /><testcase classname="tests.test_run_phase2.TestRunPhase2EntryPoint" name="test_main_function_import" time="0.005" /><testcase classname="tests.test_run_phase2.TestRunPhase2EntryPoint" name="test_script_structure" time="0.002" /><testcase classname="tests.test_run_phase2.TestRunPhase2EntryPoint" name="test_path_setup" time="0.002" /><testcase classname="tests.test_run_phase2.TestRunPhase2EntryPoint" name="test_script_execution_path" time="0.003" /><testcase classname="tests.test_schema_aware_parser" name="test_schema_aware_parsing" time="0.013" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_initialization" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_process_chapters_empty_list" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_process_chapters_single_chapter" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_process_chapters_multiple_chapters" time="0.006" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_global_sentence_id_mapped" time="0.003" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_global_sentence_id_unmapped" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_global_sentence_id_unmapped_no_number" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_chapter_sentence_range_existing" time="0.006" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_chapter_sentence_range_nonexistent" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_total_sentences" time="0.003" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_chapter_summary_empty" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_chapter_summary_with_chapters" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_extract_chapter_number_with_number" time="0.004" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_extract_chapter_number_without_number" time="0.003" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_process_chapters_with_gaps_in_sentence_ranges" time="0.002" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_process_chapters_resets_counter" time="0.004" /><testcase classname="tests.test_unified_sentence_manager.TestUnifiedSentenceManager" name="test_get_global_sentence_id_case_insensitive_fallback" time="0.004" /><testcase classname="tests.test_utils.TestExtractCoreferenceType" name="test_extract_coreference_type_valid_perspron" time="0.006" /><testcase classname="tests.test_utils.TestExtractCoreferenceType" name="test_extract_coreference_type_valid_dpron" time="0.004" /><testcase classname="tests.test_utils.TestExtractCoreferenceType" name="test_extract_coreference_type_invalid_format" time="0.002" /><testcase classname="tests.test_utils.TestExtractCoreferenceType" name="test_extract_coreference_type_empty_string" time="0.002" /><testcase classname="tests.test_utils.TestExtractCoreferenceType" name="test_extract_coreference_type_missing_value" time="0.003" /><testcase classname="tests.test_utils.TestExtractCoreferenceId" name="test_extract_coreference_id_full_format" time="0.004" /><testcase classname="tests.test_utils.TestExtractCoreferenceId" name="test_extract_coreference_id_base_only" time="0.002" /><testcase classname="tests.test_utils.TestExtractCoreferenceId" name="test_extract_coreference_id_invalid_format" time="0.002" /><testcase classname="tests.test_utils.TestExtractCoreferenceId" name="test_extract_coreference_id_empty_string" time="0.007" /><testcase classname="tests.test_utils.TestExtractCoreferenceId" name="test_extract_coreference_id_missing_value" time="0.003" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_valid_link" time="0.003" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_base_only_link" time="0.002" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_invalid_format" time="0.004" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_no_arrow" time="0.003" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_empty_string" time="0.006" /><testcase classname="tests.test_utils.TestExtractFullCoreferenceId" name="test_extract_full_coreference_id_missing_value" time="0.003" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_first_mention" time="0.003" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_subsequent_mention" time="0.002" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_base_only" time="0.002" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_invalid_format" time="0.002" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_empty_string" time="0.007" /><testcase classname="tests.test_utils.TestDetermineGivenness" name="test_determine_givenness_missing_value" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefBaseAndOccurrence" name="test_extract_coref_base_and_occurrence_full_format" time="0.006" /><testcase classname="tests.test_utils.TestExtractCorefBaseAndOccurrence" name="test_extract_coref_base_and_occurrence_base_only" time="0.003" /><testcase classname="tests.test_utils.TestExtractCorefBaseAndOccurrence" name="test_extract_coref_base_and_occurrence_invalid_format" time="0.004" /><testcase classname="tests.test_utils.TestExtractCorefBaseAndOccurrence" name="test_extract_coref_base_and_occurrence_empty_string" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefBaseAndOccurrence" name="test_extract_coref_base_and_occurrence_missing_value" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_valid_link" time="0.005" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_base_only_link" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_no_arrow" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_invalid_format" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_empty_string" time="0.002" /><testcase classname="tests.test_utils.TestExtractCorefLinkNumbers" name="test_extract_coref_link_numbers_missing_value" time="0.001" /><testcase classname="tests.test_verify_phase2" name="test_analyzer_initialization" time="0.004" /><testcase classname="tests.test_verify_phase2" name="test_coreference_extractor" time="0.007" /><testcase classname="tests.test_verify_phase2" name="test_end_to_end_with_sample" time="0.010" /><testcase classname="tests.test_verify_phase2" name="test_imports" time="0.002" /><testcase classname="tests.test_verify_phase2" name="test_parser_basic" time="0.005" /><testcase classname="tests.test_verify_phase2" name="test_token_creation" time="0.002" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_import_module" time="0.006" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_import_module_nonexistent" time="0.002" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_imports_success" time="0.003" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_imports_failure" time="0.003"><failure message="assert True is False">self = &lt;tests.test_verify_phase2.TestVerifyPhase2 object at 0x000001E2F9E4B910&gt;
mock_print = &lt;MagicMock name='print' id='2074417618192'&gt;

    @patch("builtins.print")
    def test_test_imports_failure(self, mock_print):
        """Test failed imports test."""
        with patch(
            "src.verify_phase2.import_module", side_effect=ImportError("Test error")
        ):
            result = test_imports()
&gt;           assert result is False
E           assert True is False

tests\test_verify_phase2.py:48: AssertionError</failure></testcase><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_token_creation_success" time="0.004" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_token_creation_failure" time="0.004" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_parser_basic_success" time="0.006" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_parser_basic_failure" time="0.004" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_coreference_extractor_success" time="0.005" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_coreference_extractor_failure" time="0.003" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_analyzer_initialization_success" time="0.006" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_analyzer_initialization_failure" time="0.005" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_end_to_end_with_sample_success" time="0.009" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_test_end_to_end_with_sample_failure" time="0.007" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_main_all_tests_pass" time="0.009" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_main_some_tests_fail" time="0.009" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_main_all_tests_fail" time="0.006" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_main_test_list_structure" time="0.006" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_script_execution_success" time="0.003" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_script_execution_failure" time="0.005" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_end_to_end_creates_temp_file" time="0.008" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_parser_boundary_detection" time="0.002" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_token_with_coreference_extraction" time="0.001" /><testcase classname="tests.test_verify_phase2.TestVerifyPhase2" name="test_analyzer_statistics_initialization" time="0.002" /><testcase classname="tests.test_versioning.TestVersioningFunctions" name="test_get_version" time="0.005" /><testcase classname="tests.test_versioning.TestVersioningFunctions" name="test_create_processing_config" time="0.005" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_initialization" time="0.003" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_initialization_default_path" time="0.007" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_compute_file_hash" time="0.006" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_compute_file_hash_nonexistent_file" time="0.006" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_create_metadata_basic" time="0.023" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_create_metadata_nonexistent_output" time="0.007" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_create_metadata_with_csv_statistics" time="0.011"><failure message="AssertionError: assert 'statistics' in {'file': 'C:\\Users\\Job\\AppData\\Local\\Temp\\tmpja23natf\\output.csv', 'hash': None, 'size_bytes': None}">self = &lt;tests.test_versioning.TestDataVersionManager object at 0x000001E2FA774350&gt;
mock_read_csv = &lt;MagicMock name='read_csv' id='2074418211024'&gt;

    @patch("src.data.versioning.pd.read_csv")
    def test_create_metadata_with_csv_statistics(self, mock_read_csv):
        """Test metadata creation with CSV statistics."""
        # Create test files
        input_file = self.temp_dir / "input.txt"
        output_file = self.temp_dir / "output.csv"
        input_file.write_text("input content")

        # Mock DataFrame
        mock_df = mock_read_csv.return_value
        mock_df.__len__ = lambda: 100
        mock_df.columns = ["col1", "col2", "sentence_id", "pronoun_text"]
        mock_df.__getitem__ = lambda self, key: mock_df
        mock_df.nunique = lambda: 50

        processing_config = {"test": "config"}

        metadata = self.manager.create_metadata(
            input_file=input_file,
            output_file=output_file,
            processing_config=processing_config,
        )

&gt;       assert "statistics" in metadata["output"]
E       AssertionError: assert 'statistics' in {'file': 'C:\\Users\\Job\\AppData\\Local\\Temp\\tmpja23natf\\output.csv', 'hash': None, 'size_bytes': None}

tests\test_versioning.py:158: AssertionError</failure></testcase><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_save_metadata_new_file" time="0.009" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_save_metadata_existing_file" time="0.011" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_validate_reproducibility_matching" time="0.007" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_validate_reproducibility_different" time="0.007" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_get_latest_metadata_no_file" time="0.005" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_get_latest_metadata_empty_file" time="0.006" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_get_latest_metadata_with_data" time="0.008" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_get_latest_metadata_with_phase_filter" time="0.008" /><testcase classname="tests.test_versioning.TestDataVersionManager" name="test_get_latest_metadata_phase_not_found" time="0.009" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_interactive_visualizer_import" time="0.003" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_interactive_visualizer_instantiation" time="0.006" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_interactive_visualizer_has_expected_methods" time="0.004" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_module_docstring" time="0.003" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_module_all_exports" time="0.007" /><testcase classname="tests.test_visualization.TestVisualizationImports" name="test_visualizer_logger" time="0.012" /><testcase classname="tests.unit.test_data_models.TestToken" name="test_token_creation_valid" time="0.013" /><testcase classname="tests.unit.test_data_models.TestToken" name="test_token_validation_invalid_idx" time="0.009" /><testcase classname="tests.unit.test_data_models.TestToken" name="test_token_validation_negative_sentence_num" time="0.010" /><testcase classname="tests.unit.test_data_models.TestToken" name="test_token_validation_empty_text" time="0.009" /><testcase classname="tests.unit.test_data_models.TestToken" name="test_token_columns_initialization" time="0.003" /><testcase classname="tests.unit.test_data_models.TestPhrase" name="test_phrase_creation_valid" time="0.004" /><testcase classname="tests.unit.test_data_models.TestPhrase" name="test_phrase_validation_invalid_indices" time="0.003" /><testcase classname="tests.unit.test_data_models.TestPhrase" name="test_phrase_validation_zero_indices" time="0.006" /><testcase classname="tests.unit.test_data_models.TestPhrase" name="test_phrase_validation_empty_text" time="0.006" /><testcase classname="tests.unit.test_data_models.TestPhrase" name="test_phrase_validation_empty_coref_id" time="0.008" /><testcase classname="tests.unit.test_data_models.TestAntecedentInfo" name="test_antecedent_info_creation_valid" time="0.002" /><testcase classname="tests.unit.test_data_models.TestAntecedentInfo" name="test_antecedent_info_validation_negative_choice_count" time="0.002" /><testcase classname="tests.unit.test_data_models.TestSentenceContext" name="test_sentence_context_creation_valid" time="0.003" /><testcase classname="tests.unit.test_data_models.TestSentenceContext" name="test_sentence_context_validation_invalid_sentence_num" time="0.003" /><testcase classname="tests.unit.test_data_models.TestSentenceContext" name="test_sentence_context_validation_empty_sentence_id" time="0.005" /><testcase classname="tests.unit.test_data_models.TestSentenceContext" name="test_sentence_context_validation_no_tokens" time="0.004" /><testcase classname="tests.unit.test_data_models.TestClauseMateRelationship" name="test_relationship_creation_valid" time="0.007" /><testcase classname="tests.unit.test_data_models.TestClauseMateRelationship" name="test_relationship_validation_invalid_sentence_num" time="0.004" /><testcase classname="tests.unit.test_data_models.TestClauseMateRelationship" name="test_relationship_validation_invalid_clause_mates_count" time="0.005" /><testcase classname="tests.unit.test_data_models.TestClauseMateRelationship" name="test_relationship_validation_empty_sentence_id" time="0.002" /><testcase classname="tests.unit.test_data_models.TestClauseMateRelationship" name="test_relationship_to_dict_conversion" time="0.004" /><testcase classname="tests.unit.test_data_models.TestMockDataFactory" name="test_factory_creates_consistent_objects" time="0.001" /><testcase classname="tests.unit.test_data_models.TestMockDataFactory" name="test_factory_accepts_custom_parameters" time="0.002" /><testcase classname="tests.unit.test_data_models.TestMockDataFactory" name="test_factory_creates_valid_relationships" time="0.002" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyzer_initialization_default" time="0.003" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyzer_initialization_custom" time="0.003" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyze_file_success" time="0.011" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyze_file_streaming" time="0.011" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyze_file_exception_handling" time="0.011" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_analyze_complete_success" time="0.017" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_extract_sentence_number_valid" time="0.003" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_extract_sentence_number_no_match" time="0.002" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_export_results_success" time="0.009" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_export_results_empty_relationships" time="0.006" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_export_results_exception_handling" time="0.013" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_get_statistics" time="0.003" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_detect_and_configure_format_success" time="0.008" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_detect_and_configure_format_low_compatibility" time="0.010" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_detect_and_configure_format_incomplete" time="0.009" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_detect_and_configure_format_exception" time="0.012" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_ensure_timestamped_output_path_new" time="0.009" /><testcase classname="tests.unit.test_main_analyzer.TestClauseMateAnalyzer" name="test_ensure_timestamped_output_path_existing" time="0.002" /><testcase classname="tests.unit.test_main_analyzer.TestAnalyzerIntegration" name="test_analyzer_with_mock_data" time="0.001" /><testcase classname="tests.unit.test_main_analyzer.TestAnalyzerIntegration" name="test_analyzer_statistics_tracking" time="0.004" /></testsuite></testsuites>
