name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Run CI pipeline with nox
      run: nox -s ci

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

    - name: Run integration tests
      run: |
        python src/main.py  # Test Phase 2
        python archive/phase1/clause_mates_complete.py  # Test Phase 1
        python archive/phase_comparison/compare_phases.py  # Test comparison

  reproducibility:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Test reproducibility
      run: |
        # Run Phase 2 twice and compare outputs
        python src/main.py
        cp data/output/clause_mates_phase2_export.csv run1.csv
        python src/main.py
        cp data/output/clause_mates_phase2_export.csv run2.csv

        # Check if outputs are identical
        if ! diff -q run1.csv run2.csv > /dev/null; then
          echo "ERROR: Phase 2 outputs are not reproducible"
          exit 1
        else
          echo "SUCCESS: Phase 2 outputs are reproducible"
        fi

    - name: Performance benchmarking
      run: |
        pip install memory-profiler
        # Add basic performance tests
        python -c "
        import time
        start = time.time()
        import subprocess
        result = subprocess.run(['python', 'src/main.py'], capture_output=True)
        end = time.time()
        print(f'Phase 2 execution time: {end-start:.2f} seconds')
        if end-start > 30:  # Fail if takes more than 30 seconds
            exit(1)
        "
